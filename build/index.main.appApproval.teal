#pragma version 8
// resource: R_Txn
txn ApplicationID
bz alloc
byte base64()
app_global_get
dup
int 0
extract_uint64
store 1 // GV_currentStep :: UInt
int 8
extract_uint64
store 2 // GV_currentTime :: UInt
byte base64(AA==)
app_global_get
preamble:
pushbytess base64(pHE8lg==) base64(yNBQsQ==)
txna ApplicationArgs 0
match _reachp_0 _reachp_1
errl:
err
_reachi_0:
txn Sender
store 16 // Alice/85
load 11 // v154
int 0
extract_uint64
store 12 // v153
load 11 // v154
int 8
extract_uint64
store 15 // wager/86
load 11 // v154
int 16
extract_uint64
store 14 // handAlice/87
byte base64(93ETTQ==)
load 12 // v153
itob
concat
load 15 // wager/86
itob
concat
load 14 // handAlice/87
itob
concat
log // up to 28 bytes
// ^ log: "_reach_e0" [v153,wager/86,handAlice/87] "_reach_e0(uint64,uint64,uint64)"
load 12 // v153
callsub l2_LF_timeCheck
load 15 // wager/86
callsub l3_LF_checkTxn_False
// ^ CheckPay
// at ./index.rsh:25:9:dot
l4_LF_svsDump_1:
load 16 // Alice/85
load 15 // wager/86
itob
concat
load 14 // handAlice/87
itob
concat
int 1
global Round
updateStateNoOp:
store 2 // GV_currentTime :: UInt
store 1 // GV_currentStep :: UInt
byte base64(AA==)
swap
extract 0 48
app_global_put
byte base64()
load 1 // GV_currentStep :: UInt
itob
load 2 // GV_currentTime :: UInt
itob
concat
app_global_put
txn OnCompletion
int NoOp
==
assert
// checked on completion
callsub l7_LF_updateMbr
updateState:
load 3 // GV_wasntMeth :: Bool
bnz done
apiReturn_noCheck:
byte base64(FR98dQ==)
load 4 // GV_apiRet :: Null
concat
log // up to 4 bytes
done:
int 1
return
_reachi_1:
int 1
load 1 // GV_currentStep :: UInt
==
assert
l5_LF_svsLoad_1:
dup
extract 0 32
store 16 // Alice/85
dup
int 32
extract_uint64
store 15 // wager/86
int 40
extract_uint64
store 14 // handAlice/87
load 11 // v157
int 0
extract_uint64
store 12 // v156
load 11 // v157
int 8
extract_uint64
store 13 // handBob/96
byte base64(x7YK1Q==)
load 12 // v156
itob
concat
load 13 // handBob/96
itob
concat
log // up to 20 bytes
// ^ log: "_reach_e1" [v156,handBob/96] "_reach_e1(uint64,uint64)"
load 12 // v156
callsub l2_LF_timeCheck
load 15 // wager/86
callsub l3_LF_checkTxn_False
// ^ CheckPay
// at ./index.rsh:34:7:dot
load 14 // handAlice/87
int 4
load 13 // handBob/96
-
+
int 3
%
store 11 // outcome/103
byte base64(AAAAAAAAAAEAAAAAAAAAAQ==)
byte base64(AAAAAAAAAAAAAAAAAAAAAg==)
load 11 // outcome/103
int 0
==
select
byte base64(AAAAAAAAAAIAAAAAAAAAAA==)
load 11 // outcome/103
int 2
==
select
dup
store 12 // v110
int 0
extract_uint64
load 15 // wager/86
*
// resource: R_Account
load 16 // Alice/85
callsub l6_LF_makeTxn_False_False_False_True
load 12 // v110
int 8
extract_uint64
load 15 // wager/86
*
// resource: R_Account
txn Sender
callsub l6_LF_makeTxn_False_False_False_True
updateStateHalt:
txn OnCompletion
int DeleteApplication
==
assert
// checked on completion
callsub l7_LF_updateMbr
// resource: R_Account
int 0
global CurrentApplicationAddress
global CreatorAddress
callsub l8_LF_makeTxn_False_True_False_True
b updateState
_reachp_0:
callsub l0_LF_wasntMeth
int 100000
l1_LF_mbrAdd:
load 6 // GV_mbrAdd :: UInt
+
store 6 // GV_mbrAdd :: UInt
txna ApplicationArgs 1
store 11 // v154
b _reachi_0
_reachp_1:
callsub l0_LF_wasntMeth
txna ApplicationArgs 1
store 11 // v157
b _reachi_1
alloc:
int 0
txn GlobalNumUint
==
assert
int 2
txn GlobalNumByteSlice
==
assert
int 0
txn LocalNumUint
==
assert
int 0
txn LocalNumByteSlice
==
assert
callsub l0_LF_wasntMeth
int 48
bzero
int 0
int 0
b updateStateNoOp
apiReturn_check:
txn OnCompletion
int NoOp
==
assert
// checked on completion
b apiReturn_noCheck
l9_LF_makeTxnK_False_True:
int 0
itxn_field Fee
int pay
itxn_field TypeEnum
itxn_field Receiver
itxn_field Amount
itxn_submit
retsub
updateMbr_eq:
pop
retsub
updateMbr_neg:
swap
-
dup
store 6 // GV_mbrAdd :: UInt
global CreatorAddress
callsub l6_LF_makeTxn_False_False_False_True
retsub
updateMbr_pos_eq:
-
dup
bz updateMbr_eq
dup
store 6 // GV_mbrAdd :: UInt
callsub l3_LF_checkTxn_False
retsub
l6_LF_makeTxn_False_False_False_True:
itxn_begin
b l9_LF_makeTxnK_False_True
l3_LF_checkTxn_False:
// resource: R_Txn
txn GroupIndex
load 0 // GV_txnCounter :: UInt
int 1
+
dup
store 0 // GV_txnCounter :: UInt
-
dupn 2
gtxns Receiver
global CurrentApplicationAddress
==
assert
gtxns TypeEnum
int pay
==
assert
gtxns Amount
==
assert
retsub
l0_LF_wasntMeth:
int 1
store 3 // GV_wasntMeth :: Bool
retsub
l7_LF_updateMbr:
load 6 // GV_mbrAdd :: UInt
load 7 // GV_mbrSub :: UInt
dup2
>=
bz updateMbr_neg
b updateMbr_pos_eq
l2_LF_timeCheck:
dup
int 0
==
swap
load 2 // GV_currentTime :: UInt
==
||
assert
retsub
l8_LF_makeTxn_False_True_False_True:
itxn_begin
itxn_field CloseRemainderTo
b l9_LF_makeTxnK_False_True
